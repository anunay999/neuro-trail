name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      # 3. Install dependencies (bump2version and toml)
      - name: Install dependencies
        run: |
          pip install bump2version toml

      # 4. Bump version (this updates pyproject.toml, commits, and creates a git tag)
      - name: Bump version (patch)
        run: bump2version patch

      # 5. Push commit and tags to the repository
      - name: Push changes and tags
        run: git push --follow-tags

      # 6. Get the new version from pyproject.toml (assumes your project version is stored under [tool.poetry] in pyproject.toml)
      - name: Get new version from pyproject.toml
        id: get_version
        run: |
          NEW_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['tool']['poetry']['version'])")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # 7. Generate release notes based on commit messages since the last tag
      - name: Generate release notes
        id: release_notes
        run: |
          # Get the tag that points to the current commit
          NEW_TAG=$(git tag --points-at HEAD)
          echo "New tag: $NEW_TAG"
          # Get the previous tag (if any)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, using entire commit history"
            RELEASE_NOTES=$(git log --pretty=format:"* %s")
          else
            RELEASE_NOTES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"* %s")
          fi
          echo "Release notes generated:"
          echo "$RELEASE_NOTES"
          echo "notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      # 8. Create a GitHub release with the new version, tag, and release notes
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.new_version }}
          release_name: Release ${{ steps.get_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
